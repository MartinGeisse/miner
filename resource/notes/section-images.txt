
Render Model:

631 requests total	= 20676608 cubes (~ 20M)

6: 434				= 2604
100 - 1k: 7			= 3500
1k - 5k: 30			= 75000
5k - 10k: 24		= 180000
10k - 15k: 35		= 437500
15k - 20k: 54		= 945000
20k - 30k: 72		= 1,800000

Things nicht mitgerechnet

Collider: 250 x 32768 = 8,192000
(warum 250? sollten 9 sein! -> 294912)

---------------------------------------------------------------

- Kompressions-Schemas:
	1. unknown (alle Cubes haben Typ "unknown") -- default wenn der
		Schema-Code fehlt, da häufigster Typ (entspricht leerem
		Render Model und fehlendem Collider in der aktuellen Version)
	2. empty (alle Cubes haben Typ 0) -- z.B. für "nahe" Sections in
		der Luft
	3. uniform (alle Cubes haben Typ X) -- z.B. Wasser im Meer
		Schema-Vorschlag (2) ist ein Subtyp, Cube Type 0 ist default
		wenn er fehlt
	4. Raw. Das ist vor allem für die Umstellung sinnvoll.
	5. AABSP (Axis-Aligned Binary Space Partitioning)
		siehe unten

- AABSP:
	ANMEKRUNG: Das hier genannte AABSP-Format unterstüzt Sections bis
		max. Größe 256^3 Cubes, da Koordinaten als Byte gespeichert werden.
		Das sollte aber nach bisherigem Wissen ausreichen.
	Part 1: Partitioning Schema.
		Ist eine Abfolge von 2-Bit-Codes mit der Bedeutung:
			- 00: split along x axis
			- 01: split along y axis
			- 10: split along z axis
			- 11: leaf node
		Der AABSP wird in depth-first, prefix order gespeichert und
		die Länge der Daten ist implizit darin Codiert.
	Part 2: Leaf Types (selbe Reihenfolge wie die o.g. Leaf Nodes).
		Ist eine Abfolge von 2-Bit-Codes mit der Bedeutung:
			- 00: uniform unknown
			- 01: uniform empty
			- 10: uniform X
			- 11: other
	Part 3: Padding.
		Es wird auf ein volles Byte gepadded.
	Part 4: Split Plane offset.
		Je Split Plane kommt ein Byte mit der Position entlang der
		Split-Achse.
	Part 5: Leaf Data (selbe Reihenfolge wie die o.g. Leaf Nodes).
		Je nach Leaf Type kommen jetzt Byte-Daten:
			- 00, 01: keine Daten
			- 10: 1 Byte Cube Type
			- 11: complex AABSP leaf (s.u.)

- Complex AABSP leaf:
	In Version 1 kommen jetzt einfach Cube-Daten. Aus dem AABSP-Backbone
	ergibt sich implizit die Größe des Leaf Nodes in x/y/z Richtung und
	damit auch die Länge der Daten.
	Später macht es ggf. Sinn, hier RLE, uniform with exceptions usw. zu
	verwenden.

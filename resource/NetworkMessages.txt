rewrite using network message objects?

-> client uses something like that anyway, but with a custom solution for every case
-> messages are better!
-> except section data updates, but those could avoid a whole copy by decoding Cubes objects directly from ByteBuf
	and/or use a background thread for that
-> also don't have to synchronize everything just for interaction with the network thread. Instead, have the network
	thread decode messages and put them into a queue, and have the main thread read them. (But many things must still
	be thread-safe for the GL thread).
	-> main thread must still do drawing *and* game logic to avoid further synchronization and inter-thread lag
	-> WorldWorkingSet.acceptLoadedSections() has more thread-safe queues that could be replaced with a proper
		message queue (long-term -- this is a rather big refactoring)
	-> makes the game core single-threaded; only drawing has its internal thread and networking has its internal
		thread --> much easier to develop

what about the server?

- server is multithreaded anyway
- but comment says: "TODO should not dispatch directly but through a queue."
